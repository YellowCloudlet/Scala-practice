lazy val listOfElements = Set("a",
"b",
"c",
"d",
"e",
"f",
"g",
"h",
"i",
"j",
"k",
"l",
"m",
"n",
"o",
"p",
"q",
"r",
"s",
"t",
"u",
"v",
"w",
"x",
"y",
"z",
"A",
"B",
"C",
"D",
"E",
"F",
"G",
"H",
"I",
"J",
"K",
"L",
"M",
"N",
"O",
"P",
"Q",
"R",
"S",
"T",
"U",
"V",
"W",
"X",
"Y",
"Z")

lazy val listOfPairDistances = Set(("a","b",0.88),
("a","c",0.13),
("a","d",0.42),
("a","e",0.14),
("a","f",0.63),
("a","g",0.72),
("a","h",0.76),
("a","i",0.37),
("a","j",0.6),
("a","k",0.78),
("a","l",0.46),
("a","m",0.07),
("a","n",0.27),
("a","o",0.68),
("a","p",0.64),
("a","q",0.2),
("a","r",0.99),
("a","s",0.37),
("a","t",0.92),
("a","u",0.49),
("a","v",0.5),
("a","w",0.73),
("a","x",0.12),
("a","y",0.43),
("a","z",0.98),
("a","A",0.8),
("a","B",0.13),
("a","C",0.87),
("a","D",0.77),
("a","E",0.68),
("a","F",0.94),
("a","G",0.29),
("a","H",0.59),
("a","I",0.3),
("a","J",0.72),
("a","K",0.16),
("a","L",0.66),
("a","M",0.11),
("a","N",0.99),
("a","O",0.56),
("a","P",0.59),
("a","Q",0.46),
("a","R",0.51),
("a","S",0.96),
("a","T",0.39),
("a","U",0.79),
("a","V",0.33),
("a","W",0.41),
("a","X",0.98),
("a","Y",0.29),
("a","Z",0.17),
("b","c",0.77),
("b","d",0.33),
("b","e",0.93),
("b","f",0.61),
("b","g",0.85),
("b","h",0.81),
("b","i",0.38),
("b","j",0.25),
("b","k",0.97),
("b","l",0.85),
("b","m",0.62),
("b","n",0.2),
("b","o",0.59),
("b","p",0.72),
("b","q",0.51),
("b","r",0.51),
("b","s",0.06),
("b","t",0.17),
("b","u",0.71),
("b","v",0.46),
("b","w",0.83),
("b","x",0.2),
("b","y",0.31),
("b","z",0.55),
("b","A",0.06),
("b","B",0.27),
("b","C",0.15),
("b","D",0.93),
("b","E",0.37),
("b","F",0.31),
("b","G",0.69),
("b","H",0.26),
("b","I",0.26),
("b","J",0.87),
("b","K",0.42),
("b","L",0.32),
("b","M",0.82),
("b","N",0.59),
("b","O",0.29),
("b","P",0.58),
("b","Q",0.63),
("b","R",0.01),
("b","S",0.51),
("b","T",0.76),
("b","U",0.92),
("b","V",0.24),
("b","W",0.19),
("b","X",0.42),
("b","Y",0.69),
("b","Z",0.89),
("c","d",0.68),
("c","e",0.53),
("c","f",0.3),
("c","g",0.8),
("c","h",0.4),
("c","i",0.97),
("c","j",0.48),
("c","k",0.82),
("c","l",0.02),
("c","m",0.23),
("c","n",0.15),
("c","o",0.98),
("c","p",0.11),
("c","q",0.72),
("c","r",0.12),
("c","s",0.63),
("c","t",0.37),
("c","u",0.21),
("c","v",0.55),
("c","w",0.41),
("c","x",0.69),
("c","y",0.64),
("c","z",0.95),
("c","A",0.71),
("c","B",0.17),
("c","C",0.66),
("c","D",0.55),
("c","E",0.3),
("c","F",0.73),
("c","G",0.74),
("c","H",0.32),
("c","I",0.65),
("c","J",0.4),
("c","K",0.69),
("c","L",0.19),
("c","M",0.34),
("c","N",0.85),
("c","O",0.66),
("c","P",0.55),
("c","Q",0.13),
("c","R",0.69),
("c","S",0.28),
("c","T",0.06),
("c","U",0.53),
("c","V",0.93),
("c","W",0.14),
("c","X",0.44),
("c","Y",0.44),
("c","Z",0.98),
("d","e",0.91),
("d","f",0.08),
("d","g",0.43),
("d","h",0.99),
("d","i",0.54),
("d","j",0.62),
("d","k",0.92),
("d","l",0.65),
("d","m",0.38),
("d","n",0.61),
("d","o",0.23),
("d","p",1.0),
("d","q",0.63),
("d","r",0.48),
("d","s",0.11),
("d","t",0.9),
("d","u",0.98),
("d","v",0.07),
("d","w",0.7),
("d","x",0.13),
("d","y",0.5),
("d","z",0.4),
("d","A",0.46),
("d","B",0.66),
("d","C",0.07),
("d","D",0.71),
("d","E",0.69),
("d","F",0.42),
("d","G",0.13),
("d","H",0.66),
("d","I",0.74),
("d","J",0.47),
("d","K",0.76),
("d","L",0.13),
("d","M",0.85),
("d","N",0.83),
("d","O",0.14),
("d","P",0.18),
("d","Q",0.73),
("d","R",0.04),
("d","S",0.16),
("d","T",0.74),
("d","U",0.88),
("d","V",0.04),
("d","W",0.64),
("d","X",0.94),
("d","Y",0.64),
("d","Z",0.42),
("e","f",0.6),
("e","g",0.32),
("e","h",0.25),
("e","i",0.57),
("e","j",0.18),
("e","k",0.84),
("e","l",0.47),
("e","m",0.12),
("e","n",0.52),
("e","o",0.25),
("e","p",0.28),
("e","q",0.15),
("e","r",0.35),
("e","s",0.25),
("e","t",0.15),
("e","u",0.37),
("e","v",0.06),
("e","w",0.15),
("e","x",0.18),
("e","y",0.2),
("e","z",0.48),
("e","A",0.49),
("e","B",0.25),
("e","C",0.53),
("e","D",0.62),
("e","E",0.97),
("e","F",0.1),
("e","G",0.05),
("e","H",0.39),
("e","I",0.07),
("e","J",0.53),
("e","K",0.37),
("e","L",0.82),
("e","M",0.79),
("e","N",0.69),
("e","O",0.17),
("e","P",0.24),
("e","Q",0.48),
("e","R",0.73),
("e","S",0.61),
("e","T",0.61),
("e","U",0.87),
("e","V",0.39),
("e","W",0.51),
("e","X",0.89),
("e","Y",0.62),
("e","Z",0.26),
("f","g",0.98),
("f","h",0.56),
("f","i",0.66),
("f","j",0.61),
("f","k",0.85),
("f","l",0.43),
("f","m",0.48),
("f","n",0.71),
("f","o",0.74),
("f","p",0.51),
("f","q",0.87),
("f","r",0.55),
("f","s",0.62),
("f","t",0.61),
("f","u",0.39),
("f","v",0.45),
("f","w",0.4),
("f","x",0.08),
("f","y",0.83),
("f","z",0.17),
("f","A",0.61),
("f","B",0.38),
("f","C",0.05),
("f","D",0.48),
("f","E",0.96),
("f","F",0.9),
("f","G",0.63),
("f","H",0.74),
("f","I",0.62),
("f","J",0.9),
("f","K",0.32),
("f","L",0.7),
("f","M",0.14),
("f","N",0.28),
("f","O",0.86),
("f","P",0.82),
("f","Q",0.97),
("f","R",0.64),
("f","S",0.13),
("f","T",0.86),
("f","U",0.29),
("f","V",0.84),
("f","W",0.96),
("f","X",0.69),
("f","Y",0.16),
("f","Z",0.31),
("g","h",0.32),
("g","i",0.07),
("g","j",0.79),
("g","k",0.45),
("g","l",0.43),
("g","m",0.62),
("g","n",0.54),
("g","o",0.97),
("g","p",0.1),
("g","q",0.62),
("g","r",0.5),
("g","s",0.2),
("g","t",0.4),
("g","u",0.37),
("g","v",0.42),
("g","w",0.42),
("g","x",0.44),
("g","y",0.45),
("g","z",0.26),
("g","A",0.45),
("g","B",0.42),
("g","C",0.88),
("g","D",0.06),
("g","E",0.67),
("g","F",0.73),
("g","G",0.56),
("g","H",0.57),
("g","I",0.2),
("g","J",0.33),
("g","K",0.1),
("g","L",0.7),
("g","M",0.33),
("g","N",0.3),
("g","O",0.07),
("g","P",0.12),
("g","Q",0.17),
("g","R",0.73),
("g","S",0.32),
("g","T",0.15),
("g","U",0.89),
("g","V",0.76),
("g","W",0.94),
("g","X",0.5),
("g","Y",0.5),
("g","Z",0.23),
("h","i",0.52),
("h","j",0.97),
("h","k",0.47),
("h","l",0.31),
("h","m",0.41),
("h","n",0.52),
("h","o",0.84),
("h","p",0.6),
("h","q",0.5),
("h","r",0.17),
("h","s",0.44),
("h","t",0.33),
("h","u",0.65),
("h","v",0.89),
("h","w",0.32),
("h","x",0.57),
("h","y",0.97),
("h","z",0.78),
("h","A",0.99),
("h","B",0.04),
("h","C",0.26),
("h","D",0.1),
("h","E",0.64),
("h","F",0.7),
("h","G",0.77),
("h","H",0.91),
("h","I",0.52),
("h","J",0.96),
("h","K",0.63),
("h","L",0.86),
("h","M",0.21),
("h","N",0.78),
("h","O",0.79),
("h","P",0.12),
("h","Q",0.45),
("h","R",0.42),
("h","S",0.19),
("h","T",0.45),
("h","U",0.22),
("h","V",0.58),
("h","W",0.48),
("h","X",0.23),
("h","Y",0.89),
("h","Z",0.52),
("i","j",0.11),
("i","k",0.73),
("i","l",0.89),
("i","m",0.87),
("i","n",0.93),
("i","o",0.74),
("i","p",0.15),
("i","q",0.1),
("i","r",0.08),
("i","s",0.72),
("i","t",0.47),
("i","u",0.09),
("i","v",0.76),
("i","w",0.63),
("i","x",0.07),
("i","y",0.7),
("i","z",0.04),
("i","A",0.04),
("i","B",0.6),
("i","C",0.13),
("i","D",0.56),
("i","E",0.32),
("i","F",0.72),
("i","G",0.6),
("i","H",0.18),
("i","I",0.62),
("i","J",0.16),
("i","K",0.01),
("i","L",0.45),
("i","M",0.76),
("i","N",0.9),
("i","O",0.41),
("i","P",0.4),
("i","Q",0.33),
("i","R",0.66),
("i","S",0.46),
("i","T",0.01),
("i","U",0.15),
("i","V",0.4),
("i","W",0.68),
("i","X",0.2),
("i","Y",0.63),
("i","Z",0.92),
("j","k",0.67),
("j","l",0.72),
("j","m",0.77),
("j","n",0.13),
("j","o",0.72),
("j","p",0.66),
("j","q",0.26),
("j","r",0.48),
("j","s",0.8),
("j","t",0.61),
("j","u",0.7),
("j","v",0.48),
("j","w",0.44),
("j","x",0.86),
("j","y",0.66),
("j","z",0.02),
("j","A",0.87),
("j","B",0.79),
("j","C",0.75),
("j","D",0.44),
("j","E",0.82),
("j","F",0.1),
("j","G",0.52),
("j","H",0.75),
("j","I",0.22),
("j","J",0.97),
("j","K",0.57),
("j","L",0.54),
("j","M",0.67),
("j","N",0.54),
("j","O",0.78),
("j","P",0.52),
("j","Q",0.68),
("j","R",0.31),
("j","S",0.9),
("j","T",0.43),
("j","U",0.36),
("j","V",0.36),
("j","W",0.97),
("j","X",0.16),
("j","Y",0.03),
("j","Z",0.07),
("k","l",0.47),
("k","m",0.82),
("k","n",0.95),
("k","o",0.37),
("k","p",0.54),
("k","q",0.22),
("k","r",0.57),
("k","s",0.9),
("k","t",0.84),
("k","u",0.03),
("k","v",0.87),
("k","w",0.75),
("k","x",0.75),
("k","y",0.22),
("k","z",0.62),
("k","A",0.83),
("k","B",0.49),
("k","C",0.32),
("k","D",0.96),
("k","E",0.4),
("k","F",0.28),
("k","G",0.97),
("k","H",0.49),
("k","I",0.27),
("k","J",0.59),
("k","K",0.91),
("k","L",0.65),
("k","M",0.9),
("k","N",0.49),
("k","O",0.66),
("k","P",0.28),
("k","Q",0.52),
("k","R",0.46),
("k","S",0.14),
("k","T",0.53),
("k","U",0.28),
("k","V",0.05),
("k","W",0.77),
("k","X",0.23),
("k","Y",0.61),
("k","Z",0.75),
("l","m",0.35),
("l","n",0.62),
("l","o",0.03),
("l","p",0.47),
("l","q",0.91),
("l","r",0.8),
("l","s",0.6),
("l","t",0.57),
("l","u",0.44),
("l","v",0.98),
("l","w",0.92),
("l","x",0.55),
("l","y",0.25),
("l","z",0.64),
("l","A",0.48),
("l","B",0.35),
("l","C",0.01),
("l","D",0.69),
("l","E",0.68),
("l","F",0.99),
("l","G",0.15),
("l","H",0.0),
("l","I",0.42),
("l","J",0.03),
("l","K",0.72),
("l","L",0.12),
("l","M",0.7),
("l","N",0.58),
("l","O",0.98),
("l","P",0.31),
("l","Q",0.96),
("l","R",0.88),
("l","S",0.23),
("l","T",0.1),
("l","U",0.07),
("l","V",0.63),
("l","W",0.49),
("l","X",0.03),
("l","Y",0.36),
("l","Z",0.11),
("m","n",0.74),
("m","o",0.53),
("m","p",0.74),
("m","q",0.67),
("m","r",0.05),
("m","s",0.98),
("m","t",0.35),
("m","u",0.97),
("m","v",0.21),
("m","w",0.27),
("m","x",0.75),
("m","y",0.68),
("m","z",0.66),
("m","A",0.67),
("m","B",0.78),
("m","C",0.11),
("m","D",0.61),
("m","E",0.61),
("m","F",0.57),
("m","G",0.09),
("m","H",0.55),
("m","I",0.43),
("m","J",0.1),
("m","K",0.29),
("m","L",0.75),
("m","M",0.58),
("m","N",0.1),
("m","O",0.53),
("m","P",0.83),
("m","Q",0.32),
("m","R",0.51),
("m","S",0.78),
("m","T",0.71),
("m","U",0.79),
("m","V",0.96),
("m","W",0.05),
("m","X",0.37),
("m","Y",0.15),
("m","Z",0.34),
("n","o",0.06),
("n","p",0.83),
("n","q",0.72),
("n","r",0.0),
("n","s",0.22),
("n","t",0.01),
("n","u",0.06),
("n","v",0.04),
("n","w",0.6),
("n","x",0.69),
("n","y",0.55),
("n","z",0.19),
("n","A",0.38),
("n","B",0.77),
("n","C",0.45),
("n","D",0.55),
("n","E",0.82),
("n","F",0.72),
("n","G",0.98),
("n","H",0.34),
("n","I",0.9),
("n","J",0.51),
("n","K",0.33),
("n","L",0.3),
("n","M",0.59),
("n","N",0.23),
("n","O",0.65),
("n","P",0.33),
("n","Q",0.28),
("n","R",0.41),
("n","S",0.31),
("n","T",0.89),
("n","U",0.8),
("n","V",0.05),
("n","W",0.04),
("n","X",0.74),
("n","Y",0.47),
("n","Z",0.03),
("o","p",0.74),
("o","q",0.21),
("o","r",0.93),
("o","s",0.05),
("o","t",0.07),
("o","u",0.09),
("o","v",0.62),
("o","w",0.05),
("o","x",0.79),
("o","y",0.66),
("o","z",0.52),
("o","A",0.29),
("o","B",0.71),
("o","C",0.09),
("o","D",0.18),
("o","E",0.73),
("o","F",0.49),
("o","G",0.64),
("o","H",0.11),
("o","I",0.52),
("o","J",0.26),
("o","K",0.64),
("o","L",0.27),
("o","M",0.74),
("o","N",0.06),
("o","O",0.44),
("o","P",0.01),
("o","Q",0.24),
("o","R",0.24),
("o","S",0.36),
("o","T",0.38),
("o","U",0.01),
("o","V",0.88),
("o","W",0.31),
("o","X",0.92),
("o","Y",0.61),
("o","Z",0.04),
("p","q",0.02),
("p","r",0.05),
("p","s",0.7),
("p","t",0.04),
("p","u",0.31),
("p","v",0.29),
("p","w",0.92),
("p","x",0.56),
("p","y",0.13),
("p","z",0.14),
("p","A",0.3),
("p","B",0.44),
("p","C",0.06),
("p","D",0.94),
("p","E",0.41),
("p","F",0.81),
("p","G",0.46),
("p","H",0.63),
("p","I",0.65),
("p","J",0.68),
("p","K",0.79),
("p","L",0.41),
("p","M",0.49),
("p","N",1.0),
("p","O",0.41),
("p","P",0.2),
("p","Q",0.4),
("p","R",0.22),
("p","S",0.01),
("p","T",0.89),
("p","U",0.96),
("p","V",0.49),
("p","W",0.33),
("p","X",0.05),
("p","Y",0.91),
("p","Z",0.77),
("q","r",0.87),
("q","s",0.81),
("q","t",0.53),
("q","u",0.02),
("q","v",0.3),
("q","w",0.64),
("q","x",0.01),
("q","y",0.63),
("q","z",0.08),
("q","A",0.45),
("q","B",0.76),
("q","C",0.63),
("q","D",0.03),
("q","E",0.29),
("q","F",0.83),
("q","G",0.55),
("q","H",0.71),
("q","I",0.18),
("q","J",0.39),
("q","K",0.46),
("q","L",0.79),
("q","M",0.93),
("q","N",0.72),
("q","O",0.42),
("q","P",0.51),
("q","Q",1.0),
("q","R",0.46),
("q","S",0.35),
("q","T",0.47),
("q","U",0.35),
("q","V",0.06),
("q","W",0.64),
("q","X",0.47),
("q","Y",0.69),
("q","Z",0.9),
("r","s",0.72),
("r","t",0.43),
("r","u",0.73),
("r","v",0.2),
("r","w",0.25),
("r","x",0.66),
("r","y",0.75),
("r","z",0.28),
("r","A",0.43),
("r","B",0.48),
("r","C",0.4),
("r","D",0.2),
("r","E",0.92),
("r","F",0.77),
("r","G",0.73),
("r","H",0.09),
("r","I",0.42),
("r","J",0.25),
("r","K",0.01),
("r","L",0.84),
("r","M",0.47),
("r","N",0.74),
("r","O",0.84),
("r","P",0.63),
("r","Q",0.27),
("r","R",0.83),
("r","S",0.53),
("r","T",0.18),
("r","U",0.7),
("r","V",0.38),
("r","W",0.91),
("r","X",0.36),
("r","Y",0.17),
("r","Z",0.41),
("s","t",0.97),
("s","u",0.6),
("s","v",0.36),
("s","w",0.0),
("s","x",0.88),
("s","y",0.44),
("s","z",0.9),
("s","A",0.23),
("s","B",0.45),
("s","C",0.09),
("s","D",0.8),
("s","E",0.41),
("s","F",0.73),
("s","G",0.59),
("s","H",0.64),
("s","I",0.17),
("s","J",0.25),
("s","K",0.35),
("s","L",0.59),
("s","M",0.71),
("s","N",0.31),
("s","O",0.7),
("s","P",0.9),
("s","Q",0.81),
("s","R",0.83),
("s","S",0.75),
("s","T",0.98),
("s","U",0.8),
("s","V",0.42),
("s","W",0.71),
("s","X",0.79),
("s","Y",0.6),
("s","Z",0.97),
("t","u",0.37),
("t","v",0.27),
("t","w",0.6),
("t","x",0.34),
("t","y",0.71),
("t","z",0.47),
("t","A",0.7),
("t","B",0.64),
("t","C",0.64),
("t","D",0.22),
("t","E",0.31),
("t","F",0.43),
("t","G",0.27),
("t","H",0.48),
("t","I",0.54),
("t","J",0.04),
("t","K",0.32),
("t","L",0.13),
("t","M",0.19),
("t","N",0.67),
("t","O",0.52),
("t","P",0.26),
("t","Q",0.09),
("t","R",0.08),
("t","S",0.7),
("t","T",0.36),
("t","U",0.78),
("t","V",0.12),
("t","W",0.39),
("t","X",0.12),
("t","Y",0.42),
("t","Z",0.26),
("u","v",0.44),
("u","w",0.23),
("u","x",0.5),
("u","y",0.76),
("u","z",0.08),
("u","A",0.42),
("u","B",0.25),
("u","C",0.52),
("u","D",0.39),
("u","E",0.64),
("u","F",0.96),
("u","G",0.16),
("u","H",0.72),
("u","I",0.77),
("u","J",0.21),
("u","K",0.77),
("u","L",0.2),
("u","M",0.91),
("u","N",0.63),
("u","O",0.93),
("u","P",0.64),
("u","Q",0.42),
("u","R",0.22),
("u","S",0.02),
("u","T",0.66),
("u","U",0.59),
("u","V",0.48),
("u","W",0.99),
("u","X",0.87),
("u","Y",0.28),
("u","Z",0.26),
("v","w",0.28),
("v","x",0.1),
("v","y",0.27),
("v","z",0.82),
("v","A",0.92),
("v","B",0.77),
("v","C",0.11),
("v","D",0.33),
("v","E",0.88),
("v","F",0.19),
("v","G",0.72),
("v","H",0.53),
("v","I",0.12),
("v","J",0.75),
("v","K",0.89),
("v","L",0.36),
("v","M",0.56),
("v","N",0.06),
("v","O",0.74),
("v","P",0.29),
("v","Q",0.42),
("v","R",0.67),
("v","S",0.46),
("v","T",0.43),
("v","U",0.76),
("v","V",0.51),
("v","W",0.68),
("v","X",0.59),
("v","Y",0.47),
("v","Z",0.37),
("w","x",0.79),
("w","y",0.57),
("w","z",0.78),
("w","A",0.82),
("w","B",0.39),
("w","C",0.55),
("w","D",0.94),
("w","E",0.18),
("w","F",0.61),
("w","G",0.95),
("w","H",0.84),
("w","I",0.37),
("w","J",0.2),
("w","K",0.91),
("w","L",0.44),
("w","M",0.67),
("w","N",0.2),
("w","O",0.3),
("w","P",0.15),
("w","Q",0.02),
("w","R",0.17),
("w","S",0.63),
("w","T",0.68),
("w","U",0.9),
("w","V",0.6),
("w","W",0.67),
("w","X",0.55),
("w","Y",0.09),
("w","Z",0.45),
("x","y",0.05),
("x","z",0.18),
("x","A",0.72),
("x","B",0.47),
("x","C",0.22),
("x","D",0.33),
("x","E",0.3),
("x","F",0.94),
("x","G",0.58),
("x","H",0.77),
("x","I",0.17),
("x","J",0.41),
("x","K",0.35),
("x","L",0.29),
("x","M",0.07),
("x","N",0.2),
("x","O",0.11),
("x","P",0.46),
("x","Q",0.91),
("x","R",0.58),
("x","S",0.4),
("x","T",0.14),
("x","U",0.97),
("x","V",0.49),
("x","W",0.0),
("x","X",0.5),
("x","Y",0.13),
("x","Z",0.66),
("y","z",0.96),
("y","A",0.79),
("y","B",0.27),
("y","C",0.39),
("y","D",0.07),
("y","E",0.8),
("y","F",0.59),
("y","G",0.74),
("y","H",0.19),
("y","I",0.15),
("y","J",0.83),
("y","K",0.25),
("y","L",0.93),
("y","M",0.9),
("y","N",0.53),
("y","O",0.58),
("y","P",0.92),
("y","Q",0.47),
("y","R",0.92),
("y","S",0.58),
("y","T",0.81),
("y","U",0.22),
("y","V",0.71),
("y","W",0.34),
("y","X",0.41),
("y","Y",0.42),
("y","Z",0.49),
("z","A",0.05),
("z","B",0.54),
("z","C",0.31),
("z","D",0.8),
("z","E",0.73),
("z","F",0.88),
("z","G",0.31),
("z","H",0.15),
("z","I",0.71),
("z","J",0.27),
("z","K",0.22),
("z","L",0.85),
("z","M",0.07),
("z","N",0.35),
("z","O",0.2),
("z","P",0.85),
("z","Q",0.56),
("z","R",0.35),
("z","S",0.35),
("z","T",0.69),
("z","U",0.97),
("z","V",0.43),
("z","W",0.87),
("z","X",0.9),
("z","Y",0.74),
("z","Z",0.22),
("A","B",0.33),
("A","C",0.25),
("A","D",0.33),
("A","E",0.91),
("A","F",0.82),
("A","G",0.07),
("A","H",0.77),
("A","I",0.27),
("A","J",0.79),
("A","K",0.32),
("A","L",0.09),
("A","M",0.44),
("A","N",0.79),
("A","O",0.64),
("A","P",0.69),
("A","Q",0.21),
("A","R",0.99),
("A","S",0.29),
("A","T",0.78),
("A","U",0.66),
("A","V",0.46),
("A","W",0.75),
("A","X",0.13),
("A","Y",0.05),
("A","Z",0.89),
("B","C",0.72),
("B","D",0.81),
("B","E",0.39),
("B","F",0.36),
("B","G",0.51),
("B","H",0.5),
("B","I",0.15),
("B","J",0.94),
("B","K",0.9),
("B","L",0.28),
("B","M",0.05),
("B","N",0.13),
("B","O",0.56),
("B","P",0.85),
("B","Q",0.6),
("B","R",0.65),
("B","S",0.73),
("B","T",0.39),
("B","U",0.14),
("B","V",0.63),
("B","W",0.18),
("B","X",0.27),
("B","Y",0.05),
("B","Z",0.93),
("C","D",0.5),
("C","E",0.93),
("C","F",0.49),
("C","G",0.54),
("C","H",0.02),
("C","I",0.66),
("C","J",0.76),
("C","K",0.49),
("C","L",0.55),
("C","M",0.54),
("C","N",0.83),
("C","O",0.57),
("C","P",0.13),
("C","Q",0.36),
("C","R",0.37),
("C","S",0.02),
("C","T",0.78),
("C","U",0.45),
("C","V",0.6),
("C","W",0.23),
("C","X",0.86),
("C","Y",0.88),
("C","Z",0.89),
("D","E",0.82),
("D","F",0.48),
("D","G",0.08),
("D","H",0.23),
("D","I",0.85),
("D","J",0.73),
("D","K",0.86),
("D","L",0.57),
("D","M",0.08),
("D","N",0.06),
("D","O",0.67),
("D","P",0.29),
("D","Q",0.47),
("D","R",0.47),
("D","S",0.92),
("D","T",0.95),
("D","U",0.09),
("D","V",0.45),
("D","W",0.79),
("D","X",0.15),
("D","Y",0.52),
("D","Z",0.66),
("E","F",0.93),
("E","G",0.21),
("E","H",0.97),
("E","I",0.53),
("E","J",0.46),
("E","K",0.13),
("E","L",0.54),
("E","M",0.88),
("E","N",0.05),
("E","O",0.39),
("E","P",0.74),
("E","Q",0.62),
("E","R",0.07),
("E","S",0.32),
("E","T",0.41),
("E","U",0.12),
("E","V",0.47),
("E","W",0.34),
("E","X",0.86),
("E","Y",0.96),
("E","Z",0.64),
("F","G",0.41),
("F","H",0.75),
("F","I",0.89),
("F","J",0.66),
("F","K",0.45),
("F","L",0.54),
("F","M",0.8),
("F","N",0.75),
("F","O",0.34),
("F","P",0.48),
("F","Q",0.43),
("F","R",0.67),
("F","S",0.38),
("F","T",0.32),
("F","U",0.39),
("F","V",0.42),
("F","W",0.56),
("F","X",0.76),
("F","Y",0.74),
("F","Z",0.7),
("G","H",0.41),
("G","I",0.96),
("G","J",0.06),
("G","K",0.71),
("G","L",0.14),
("G","M",0.71),
("G","N",0.46),
("G","O",0.97),
("G","P",0.23),
("G","Q",0.46),
("G","R",0.25),
("G","S",0.76),
("G","T",0.25),
("G","U",0.72),
("G","V",0.85),
("G","W",0.73),
("G","X",0.15),
("G","Y",0.82),
("G","Z",0.01),
("H","I",0.68),
("H","J",0.43),
("H","K",0.14),
("H","L",0.32),
("H","M",0.8),
("H","N",0.05),
("H","O",0.83),
("H","P",0.47),
("H","Q",0.3),
("H","R",0.87),
("H","S",0.74),
("H","T",0.21),
("H","U",0.06),
("H","V",0.68),
("H","W",0.01),
("H","X",0.29),
("H","Y",0.87),
("H","Z",0.68),
("I","J",0.31),
("I","K",0.97),
("I","L",0.75),
("I","M",0.08),
("I","N",0.5),
("I","O",0.99),
("I","P",0.2),
("I","Q",0.64),
("I","R",0.08),
("I","S",0.76),
("I","T",0.52),
("I","U",0.04),
("I","V",0.52),
("I","W",0.8),
("I","X",0.72),
("I","Y",0.14),
("I","Z",0.94),
("J","K",0.13),
("J","L",0.56),
("J","M",0.22),
("J","N",0.74),
("J","O",0.3),
("J","P",0.54),
("J","Q",0.13),
("J","R",0.73),
("J","S",0.42),
("J","T",0.31),
("J","U",0.06),
("J","V",0.49),
("J","W",0.12),
("J","X",0.48),
("J","Y",0.39),
("J","Z",0.97),
("K","L",0.97),
("K","M",0.5),
("K","N",0.68),
("K","O",0.97),
("K","P",0.38),
("K","Q",0.63),
("K","R",0.44),
("K","S",0.73),
("K","T",0.2),
("K","U",0.55),
("K","V",0.55),
("K","W",0.6),
("K","X",0.65),
("K","Y",0.96),
("K","Z",0.84),
("L","M",0.76),
("L","N",0.25),
("L","O",0.62),
("L","P",0.31),
("L","Q",0.31),
("L","R",0.63),
("L","S",0.9),
("L","T",0.72),
("L","U",0.81),
("L","V",0.82),
("L","W",0.82),
("L","X",0.39),
("L","Y",0.43),
("L","Z",0.89),
("M","N",0.11),
("M","O",0.83),
("M","P",0.87),
("M","Q",0.15),
("M","R",0.32),
("M","S",0.03),
("M","T",0.36),
("M","U",0.22),
("M","V",0.7),
("M","W",0.43),
("M","X",0.84),
("M","Y",0.51),
("M","Z",0.41),
("N","O",0.99),
("N","P",0.29),
("N","Q",0.55),
("N","R",0.72),
("N","S",0.72),
("N","T",0.75),
("N","U",0.55),
("N","V",0.82),
("N","W",0.98),
("N","X",0.62),
("N","Y",0.46),
("N","Z",0.61),
("O","P",0.85),
("O","Q",0.56),
("O","R",0.34),
("O","S",0.67),
("O","T",0.66),
("O","U",0.86),
("O","V",0.74),
("O","W",0.96),
("O","X",0.46),
("O","Y",0.15),
("O","Z",0.07),
("P","Q",0.02),
("P","R",0.74),
("P","S",0.1),
("P","T",0.54),
("P","U",0.78),
("P","V",0.42),
("P","W",0.14),
("P","X",0.62),
("P","Y",0.9),
("P","Z",0.38),
("Q","R",0.38),
("Q","S",0.97),
("Q","T",0.11),
("Q","U",0.25),
("Q","V",0.46),
("Q","W",0.49),
("Q","X",0.13),
("Q","Y",0.23),
("Q","Z",0.6),
("R","S",0.34),
("R","T",0.69),
("R","U",0.28),
("R","V",0.01),
("R","W",0.9),
("R","X",0.45),
("R","Y",0.44),
("R","Z",0.68),
("S","T",0.29),
("S","U",0.01),
("S","V",0.66),
("S","W",0.66),
("S","X",0.94),
("S","Y",0.75),
("S","Z",0.77),
("T","U",0.19),
("T","V",0.56),
("T","W",0.95),
("T","X",0.63),
("T","Y",0.52),
("T","Z",0.08),
("U","V",0.38),
("U","W",0.49),
("U","X",0.67),
("U","Y",0.13),
("U","Z",0.82),
("V","W",0.81),
("V","X",0.27),
("V","Y",0.51),
("V","Z",0.82),
("W","X",0.74),
("W","Y",0.32),
("W","Z",0.93),
("X","Y",0.58),
("X","Z",0.33),
("Y","Z",0.86))

  var choosenPair: Tuple3[String, String, Double] = ("0","0",0.0)
  var dynamical_Part: Set[Tuple3[String, String, Double]] = Set(("0","0",0.0))
  var static_Part: Set[Tuple3[String, String, Double]] = Set(("0","0",0.0))
  var listOf_NEW_Elements: Set[String] = Set("0")
  var newElement: String = "0"
  var new_dynamical_Part: Set[Tuple3[String,String,Double]] = Set(("0","0",0.0))
  var result_Part: Set[Tuple3[String,String,Double]] = Set(("0","0",0.0))
  var TEMPlistOf_NEW_Elements: Set[String] = Set("0")
  var nextStep = 0

val accuracy: Int = 3

def clusteringUPGMA(setOfPairs: Set[(String, String, Double)], setOfElements: Set[String], step: Int = 1): Unit = (setOfPairs.size > accuracy) match {  
case false => {
println(s"_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_")
println(s"clustering step is: |${step}|")
println(s"setOfPairs is: ${setOfPairs}")
println(s"setOfElements is: ${setOfElements}")
}
case true => {
  
choosenPair = findMin(setOfPairs)
nextStep = step + 1  
  
def findMin(set: Set[(String,String,Double)]): (String,String,Double) = {
  set.minBy(_._3)
}  

def isElementInPair(test_element: (String,String,Double)): Boolean = {
    (choosenPair._1.contains(test_element._1) || 
     choosenPair._1.contains(test_element._2) || 
     choosenPair._2.contains(test_element._1) || 
     choosenPair._2.contains(test_element._2))
  }

dynamical_Part = setOfPairs.filter{
  element => {
    if(isElementInPair(element)) {true}
    else {false}
  }
}

static_Part = setOfPairs.filter{
  element => {
    if(isElementInPair(element)) {false}
    else {true}
  }
}

listOf_NEW_Elements = setOfElements.filter{
  element => {
    if(element != choosenPair._1 && element != choosenPair._2){true}
    else{false}
  }
}

newElement = choosenPair._1 + choosenPair._2

def newDistance(distance1: Double, distance2: Double): Double = {
  lazy val Distance: Double = distance1/2 + distance2/2
  Distance
}

def find(set: Set[(String,String,Double)], pair: Tuple2[String,String]) = set.filter{
  element => {
    if(element._1.equals(pair._1) && element._2.equals(pair._2) || element._1.equals(pair._2) && element._2.equals(pair._1)){true}
    else{false}
  }
}.head._3


new_dynamical_Part = listOf_NEW_Elements.foldLeft(List.empty[(String,String,Double)]){
  case (acc, element) => {
    val temp_ac_dis: Double = find(dynamical_Part, (element, choosenPair._1))
    val temp_bc_dis: Double = find(dynamical_Part, (element, choosenPair._2))
    val createdElement = (element, newElement, newDistance(temp_ac_dis, temp_bc_dis))
    acc :+ createdElement  
  } 
}.toSet

result_Part = static_Part ++ new_dynamical_Part

TEMPlistOf_NEW_Elements = listOf_NEW_Elements ++ Set(newElement)

println(s"_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_")
println(s"clustering step is: |${step}|")
println(s"setOfElements is: ${setOfElements}")
println(s"DYN_part is: ${dynamical_Part}")
println(s"STAT_part is: ${static_Part}")
println(s"newElement is: ${newElement}")
println(s"new_dynamical_Part is: ${new_dynamical_Part}")
println(s"result_Part after 1 cluster iteration is: ${result_Part}")
println(s"listOf_NEW_Elements is: ${listOf_NEW_Elements}")
println(s"TEMPlistOf_NEW_Elements is: ${TEMPlistOf_NEW_Elements}")}
//------------------------------------------------------------------
clusteringUPGMA(result_Part,TEMPlistOf_NEW_Elements,nextStep)
}

clusteringUPGMA(listOfPairDistances,listOfElements)
