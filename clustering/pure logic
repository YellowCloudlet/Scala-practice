def isElementInPair(element: Char, pair:Tuple2[Char,Char]): Boolean = {
    pair._1.equals(element) || pair._2.equals(element)
  }

val matrix = Map[(Char,Char), Int](
('a','b') -> 1,
('a','c') -> 2,
('b','c') -> 3,
('f','c') -> 3
)

val dynamicPart = matrix.filter {
      case (k, _) => (isElementInPair(pair_ab._1, k) || isElementInPair(pair_ab._2, k)) && !(isElementInPair(pair_ab._1, k) && isElementInPair(pair_ab._2, k))
    }.map {
      case (k, v) => k -> v
    }

println(dynamicPart)
Map((a,c) -> 2, (b,c) -> 3)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
val test_pair = (("a","b"), "o")

val matrix = List(
(("a","c"), "newDistance"),
(("b","c"), "newDistance"),
(("a","m"), "newDistance"),
(("b","m"), "newDistance")
)

matrix.fold(test_pair){
 (acc,i) => {
    if((acc._1._1+acc._1._2).contains(i._1._1)){((test_pair._1._1+test_pair._1._2,i._1._2),i._2)}
   else{(("wrong","wrong"),i._2)}
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
val list = List(1,2,3,4,5,6)

list.foldLeft(List[Int]()){
  (accumulator, item) =>
  val temp = {
    if (item%2==0) {2}
    else if (item%3==0) {3}
    else {0}
  }
  accumulator :+ temp
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class pair(val first: Int, val second: Int, val distance: Int)
object pair {
  def apply(first: Int, second: Int, distance: Int) = new pair(first, second, distance)
}

val pairsList = List(pair(1,1,0),pair(1,2,37),pair(1,3,27),pair(2,3,18))

val pairList = pairsList.foldLeft(List[Int]()) { (accumulator, i) =>
  val title = (i.distance%2==0) match {
    case true => 2
    case false => 3
  }
  accumulator :+ title
}

println(pairList)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class pair(val first: String, val second: String, val distance: Double)
object pair {
  def apply(first: String, second: String, distance: Double) = new pair(first, second, distance)
}

val pairsList = List(pair("a","c",0.134),pair("b","c",0.97),pair("a","m",0.19),pair("b","m",0.553))

val pairList = pairsList.foldLeft(List[(pair,String)]()) { (accumulator, i) =>
  val title = (i.distance<0.5) match {
    case true => "true"
    case false => "false"
  }
  accumulator :+ (i,title)
}

println(s"The result list after fold method is: \n $pairList \n and the distance of 1rst element in this list is: \n ${pairList(0)._1.distance}")

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//логика самой динамической части, добавить так же дистанции в коефициенты и возможно сделать метод рекурсивным
val list = List(("a","a"),("a","c"),("b","c"),("a","d"),("b","d"))

val choosen_Pair = ("a","b")

//def isElInPair():Boolean

list.zipWithIndex.foldLeft(List.empty[(String,String)]){
 case (acc, (curr, idx)) => {
    if(list.lift(idx).getOrElse(("0","0"))._2==list.lift(idx+1).getOrElse(("0","0"))._2) {acc:+ (curr._1+list.lift(idx+1).getOrElse(("0","0"))._1,curr._2)}
    else {acc:+ ("||","||")} 
  }
}.filter{
  case element => {
    if (element._1== "||" ) {false}
    else {true}
  }
}

/*val deff = list.filter{
  case el => {
    if(el._)
  }
}*/

__________________________________________________________________________________________________________________________

import scala.collection.mutable.LinkedHashMap

def isElementInPair(element: String, pair:Tuple2[String,String]): Boolean = {
    pair._1.equals(element) || pair._2.equals(element)
  }

val pair_ab = ("a","b")

val matrix = LinkedHashMap[(String, String), Double](
  ("a","b")	 -> 	0.1,
  ("a","c")	 -> 	0.2,
  ("b","c")	 -> 	0.3,
  ("fff","kkk")	->	0.6,
  ("qqq","ggg")	->	0.73,
  ("a","d")	->	0.18,
  ("b","d")	->	0.19
)

val dynamicPart = matrix.filter {
      case (k, v) => (isElementInPair(pair_ab._1, k) || isElementInPair(pair_ab._2, k)) && !(isElementInPair(pair_ab._1, k) && isElementInPair(pair_ab._2, k))
    }


println(dynamicPart)
