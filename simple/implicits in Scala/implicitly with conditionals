import scala.language.implicitConversions
trait Mammal{
  def voice(s:String):Unit
}

class Cat extends Mammal{
	override def voice(s:String):Unit = println(s"${s}_cat")
}

class Dog extends Mammal{
  override def voice(s: String):Unit = println(s"${s}_dog")
}

implicit def animalCetcher(something: String): Mammal = something match {
  case "Dog" => new Dog{}
  case "Cat" => new Cat{}
}

def showVoice(x: Mammal,v: String):Unit={x.voice(v)}

implicit val testObj = new Dog{}

showVoice(implicitly[Mammal], "Gufff")
showVoice("Dog", "Gufff")
showVoice("Cat", "Meom")
