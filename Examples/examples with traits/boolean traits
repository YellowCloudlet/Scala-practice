trait Message[T] {
        def ping(m: T): Unit = println(m)
      }
  
  		trait RightMessage[T] extends Message[T] {
        override def ping(m: T): Unit = println(s"${m} : is a right message!")
      }
 	 
  		trait WrongMessage[T] extends Message[T] {
        override def ping(m: T): Unit = println(s"${m} : is a wrong message!")
      }

      sealed trait Matching {
        type Match[TrueMatch <: AnyMatch, FalseMatch <: AnyMatch, AnyMatch] <: AnyMatch
      }

      class TMatch extends Matching {
        type Match[TrueMatch <: AnyMatch, FalseMatch <: AnyMatch, AnyMatch] = TrueMatch
      }

      class FMatch extends Matching {
        type Match[TrueMatch <: AnyMatch, FalseMatch <: AnyMatch, AnyMatch] = FalseMatch
      }

			type Some[T <: Matching] = T#Match[RightMessage[String],WrongMessage[Int],Message[_]]
																		
val message: Some[TMatch] = new RightMessage[String]{}
message.ping("27")
val trash: Some[FMatch] = new WrongMessage[Int]{}
trash.ping(27)
