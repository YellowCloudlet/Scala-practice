import BehaviorInstances._
import BehaviorSyntax._

trait All
final case class Photon(description: String) extends All
final case class Proton(description: String) extends All

trait Behavior[T]{
  def show(what: T): String	
}
	
object BehaviorInstances {							
  implicit val photonDes: Behavior[Photon] = new Behavior[Photon] {
    def show(what: Photon): String = {
      what.description+"_it is a photon"
    }
  }
  implicit val protonDes: Behavior[Proton] = new Behavior[Proton] {
    def show(what: Proton): String = {
      what.description+"_it is a proton"
    }
  }
}

object BehaviorInterface {
  def useDescription[A](value: A)(implicit w: Behavior[A]): String = {
    w.show(value)+"_interface"
  }
}

object BehaviorSyntax {
implicit class BehaviorOps[A](value: A) {
  def useDescription(implicit w: Behavior[A]): String =
    w.show(value)+"_syntax"
  }
}

println(BehaviorInstances.photonDes.show(Photon("10")))
println(BehaviorInstances.protonDes.show(Proton("10")))
println(BehaviorInterface.useDescription(Photon("10")))
println(Photon("10").useDescription)
