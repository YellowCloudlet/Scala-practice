trait All
final case class Photon(description: String) extends All
final case class Proton(description: String) extends All

trait Behavior[T]{
  def show(what: T): String	
}
	
object Behavior {							// type class
  implicit val photonDes: Behavior[Photon] = new Behavior[Photon] { // type class instances 
    def show(what: Photon): String = {
      what.description
    }
  }
  implicit val protonDes: Behavior[Proton] = new Behavior[Proton] { // type class instances
    def show(what: Proton): String = {
      what.description
    }
  }
}

object BehaviorInterface {  // type class interfaces
  def useDescription[A](value: A)(implicit w: Behavior[A]): String = {
    w.show(value)+"_interface"
  }
}

println(Behavior.photonDes.show(Photon("10")))
println(BehaviorInterface.useDescription(Photon("10")))
