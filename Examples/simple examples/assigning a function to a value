// the same thing a:
// def f(x: Int) = x * 2
// val test = f(2)
// test

val test = (i: Int) => {i * 2}
test(2)

//or one more variant
// "=>" means transformer, so Int transformed as Int = n, where n transformed as n * 2
// so test2 value of Int type is going to have a parameter of type Int(or type Int which is a container by the way) 
//which is being named "n" and is equal to {n * 2}

val test2: Int => Int = n => {n * 2}  
test2(2)

//or like that: 
val test22: (Double,Double) => Double = (n: Double, y: Double) => {n * y}
test22(2,2)

//and here is another one:
val error: (Double, Double, Double, Double, Double) => Double = new Function5[Double,Double,Double,Double,Double,Double]{
  	def apply(e1: Double, e2: Double, e3: Double, e4: Double, e5: Double) = {
      e1 * e1 + e2 * e2 + e3 * e3 + e4 * e4 + e5 * e5
    }
} 
