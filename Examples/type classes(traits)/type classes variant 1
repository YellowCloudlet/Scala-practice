trait All
case class God(name: String) extends All
case class Human(name: String) extends All

trait Behavior[T]{
  def speak(speach: T): Unit	//default behavior of method in Behavior trait
}
	
object Behavior {							//default object of Behavior trait which implements speak method, but only for God and Human
  implicit object OnlyForGod extends Behavior[God] {
    def speak(god: God) { println(s"This is God: ${god.name}")}
  }
  implicit object OnlyForHuman extends Behavior[Human] {
    def speak(human: Human) { println(s"This is Human: ${human.name}")}
  }
}

def makeHumanOrGodSpeak[T](something: T)(implicit behavior: Behavior[T]) {
behavior.speak(something)
}

makeHumanOrGodSpeak(God("Universe"))
makeHumanOrGodSpeak(Human("Adam"))
